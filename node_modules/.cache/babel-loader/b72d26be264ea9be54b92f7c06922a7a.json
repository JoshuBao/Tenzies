{"ast":null,"code":"var _jsxFileName = \"/Users/joshuacheng/Desktop/CodingProjects/Tenzies/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport style from \"./style.css\";\nimport Die from \"./components/Die\";\nimport { nanoid } from \"nanoid\";\n/**\n * Challenge:\n * \n * Create state to hold our array of numbers. (Initialize\n * the state by calling our `allNewDice` function so it \n * loads all new dice as soon as the app loads)\n * \n * Map over the state numbers array to generate our array\n * of Die elements and render those in place of our\n * manually-written 10 Die elements.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  /**\n  * Challenge: Add conditional styling to the Die component\n  * so that if it's held (isHeld === true), its background color\n  * changes to a light green ()\n  * \n  * Remember: currently the Die component has no way of knowing\n  * if it's \"held\" or not.\n  */\n  const styles = {\n    backgroundColor: dice.isHeld ? \"#59E391\" : \"white\"\n  };\n  const [dice, setDice] = React.useState(allNewDice());\n\n  function allNewDice() {\n    const newDice = [];\n\n    for (let i = 0; i < 10; i++) {\n      newDice.push({\n        value: Math.ceil(Math.random() * 6),\n        isHeld: true,\n        id: nanoid()\n      });\n    }\n\n    return newDice;\n  }\n\n  function rollDice() {\n    setDice(prevDice => allNewDice());\n  }\n\n  const diceElements = dice.map(die => /*#__PURE__*/_jsxDEV(Die, {\n    style: styles,\n    value: die.value,\n    isHeld: isHeld\n  }, die.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 3\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dice-container\",\n      children: diceElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"roll-dice\",\n      onClick: rollDice,\n      children: \"Roll\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"xvXbcdGT8woTgToF7dgthv/zhW0=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","style","Die","nanoid","App","styles","backgroundColor","dice","isHeld","setDice","useState","allNewDice","newDice","i","push","value","Math","ceil","random","id","rollDice","prevDice","diceElements","map","die"],"sources":["/Users/joshuacheng/Desktop/CodingProjects/Tenzies/src/App.js"],"sourcesContent":["import React from \"react\"\nimport style from \"./style.css\"\nimport Die from \"./components/Die\"\nimport { nanoid } from \"nanoid\"\n\n/**\n * Challenge:\n * \n * Create state to hold our array of numbers. (Initialize\n * the state by calling our `allNewDice` function so it \n * loads all new dice as soon as the app loads)\n * \n * Map over the state numbers array to generate our array\n * of Die elements and render those in place of our\n * manually-written 10 Die elements.\n */\nexport default function App() {\n  /**\n * Challenge: Add conditional styling to the Die component\n * so that if it's held (isHeld === true), its background color\n * changes to a light green ()\n * \n * Remember: currently the Die component has no way of knowing\n * if it's \"held\" or not.\n */\n  const styles = {\n    backgroundColor: dice.isHeld? \"#59E391\": \"white\"\n  }\n  const [dice,setDice] = React.useState(allNewDice())\n  function allNewDice() {\n    const newDice = []\n    for (let i = 0; i < 10; i++) {\n      newDice.push({\n        value:Math.ceil(Math.random() * 6),\n        isHeld:true,\n        id: nanoid()\n      })\n    }\n    \n    \n    return newDice\n  }\n  function rollDice()\n  {\n    setDice(prevDice => allNewDice())\n  }\n  const diceElements = dice.map(die => \n  <Die style={styles} key={die.id} value={die.value} isHeld={isHeld} />)\n  \n  return (\n    <main>\n      <div className=\"dice-container\">\n        {diceElements}\n      </div>\n      <button className=\"roll-dice\"onClick={rollDice}>Roll</button>\n    </main>\n  )\n}"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASC,GAAT,GAAe;EAAA;;EAC5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,MAAM,GAAG;IACbC,eAAe,EAAEC,IAAI,CAACC,MAAL,GAAa,SAAb,GAAwB;EAD5B,CAAf;EAGA,MAAM,CAACD,IAAD,EAAME,OAAN,IAAiBT,KAAK,CAACU,QAAN,CAAeC,UAAU,EAAzB,CAAvB;;EACA,SAASA,UAAT,GAAsB;IACpB,MAAMC,OAAO,GAAG,EAAhB;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;MAC3BD,OAAO,CAACE,IAAR,CAAa;QACXC,KAAK,EAACC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgB,CAA1B,CADK;QAEXV,MAAM,EAAC,IAFI;QAGXW,EAAE,EAAEhB,MAAM;MAHC,CAAb;IAKD;;IAGD,OAAOS,OAAP;EACD;;EACD,SAASQ,QAAT,GACA;IACEX,OAAO,CAACY,QAAQ,IAAIV,UAAU,EAAvB,CAAP;EACD;;EACD,MAAMW,YAAY,GAAGf,IAAI,CAACgB,GAAL,CAASC,GAAG,iBACjC,QAAC,GAAD;IAAK,KAAK,EAAEnB,MAAZ;IAAiC,KAAK,EAAEmB,GAAG,CAACT,KAA5C;IAAmD,MAAM,EAAEP;EAA3D,GAAyBgB,GAAG,CAACL,EAA7B;IAAA;IAAA;IAAA;EAAA,QADqB,CAArB;EAGA,oBACE;IAAA,wBACE;MAAK,SAAS,EAAC,gBAAf;MAAA,UACGG;IADH;MAAA;MAAA;MAAA;IAAA,QADF,eAIE;MAAQ,SAAS,EAAC,WAAlB;MAA6B,OAAO,EAAEF,QAAtC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAJF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAQD;;GAzCuBhB,G;;KAAAA,G"},"metadata":{},"sourceType":"module"}