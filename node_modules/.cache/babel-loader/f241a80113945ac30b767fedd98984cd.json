{"ast":null,"code":"import _objectSpread from\"/Users/joshuacheng/Desktop/CodingProjects/Tenzies/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/joshuacheng/Desktop/CodingProjects/Tenzies/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from\"react\";import Die from\"./components/Die\";import{nanoid}from\"nanoid\";import Confetti from'react-confetti';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function App(){var _React$useState=React.useState(allNewDice()),_React$useState2=_slicedToArray(_React$useState,2),dice=_React$useState2[0],setDice=_React$useState2[1];var _React$useState3=React.useState(false),_React$useState4=_slicedToArray(_React$useState3,2),tenzies=_React$useState4[0],setTenzies=_React$useState4[1];var _React$useState5=React.useState(0),_React$useState6=_slicedToArray(_React$useState5,2),rollCount=_React$useState6[0],setRollCount=_React$useState6[1];/**\n * Challenge: Check the dice array for these winning conditions:\n * 1. All dice are held, and\n * 2. all dice have the same value\n * \n * If both conditions are true, set `tenzies` to true and log\n * \"You won!\" to the console\n */React.useEffect(function(){var allHeld=dice.every(function(die){return die.isHeld;});var firstValue=dice[0].value;var allSameValue=dice.every(function(die){return die.value===firstValue;});if(allHeld&&allSameValue){setTenzies(true);}},[dice]);function generateNewDie(){return{value:Math.ceil(Math.random()*6),isHeld:false,id:nanoid()};}function allNewDice(){var newDice=[];for(var i=0;i<10;i++){newDice.push(generateNewDie());}return newDice;}function rollDice(){if(!tenzies){setRollCount(function(prevRollCount){return prevRollCount+1;});setDice(function(prevDice){return prevDice.map(function(die){return die.isHeld?die:generateNewDie();});});}else{setTenzies(false);setDice(allNewDice());setRollCount(0);}}function _holdDice(id){return setDice(function(prevDice){return prevDice.map(function(die){return die.id===id?_objectSpread(_objectSpread({},die),{},{isHeld:!die.isHeld}):die;});});}var diceElements=dice.map(function(die){return/*#__PURE__*/_jsx(Die,{holdDice:function holdDice(){return _holdDice(die.id);},value:die.value,isHeld:die.isHeld},die.id);});return/*#__PURE__*/_jsxs(\"main\",{children:[tenzies&&/*#__PURE__*/_jsx(Confetti,{}),/*#__PURE__*/_jsx(\"h1\",{className:\"title\",children:\"Tenzies\"}),/*#__PURE__*/_jsx(\"p\",{className:\"instructions\",children:\"Roll until all dice are the same. Click each die to freeze it at its current value between rolls.\"}),/*#__PURE__*/_jsx(\"div\",{className:\"dice-container\",children:diceElements}),/*#__PURE__*/_jsxs(\"h3\",{className:\"rollCount\",children:[\"Number of Rolls: \",rollCount]}),/*#__PURE__*/_jsx(\"button\",{className:\"roll-dice\",onClick:rollDice,children:tenzies?\"New Game\":\"Roll\"})]});}","map":{"version":3,"names":["React","Die","nanoid","Confetti","App","useState","allNewDice","dice","setDice","tenzies","setTenzies","rollCount","setRollCount","useEffect","allHeld","every","die","isHeld","firstValue","value","allSameValue","generateNewDie","Math","ceil","random","id","newDice","i","push","rollDice","prevRollCount","prevDice","map","holdDice","diceElements"],"sources":["/Users/joshuacheng/Desktop/CodingProjects/Tenzies/src/App.js"],"sourcesContent":["import React from \"react\"\nimport Die from \"./components/Die\"\nimport { nanoid } from \"nanoid\"\n\nimport Confetti from 'react-confetti'\n\nexport default function App() {\n\n \n  const [dice,setDice] = React.useState(allNewDice())\n  const [tenzies,setTenzies] = React.useState(false)\n  const [rollCount,setRollCount] = React.useState(0)\n  /**\n * Challenge: Check the dice array for these winning conditions:\n * 1. All dice are held, and\n * 2. all dice have the same value\n * \n * If both conditions are true, set `tenzies` to true and log\n * \"You won!\" to the console\n */\n  React.useEffect(() => {\n    const allHeld = dice.every(die => die.isHeld)\n    const firstValue = dice[0].value\n    const allSameValue = dice.every(die => die.value === firstValue)\n    if (allHeld && allSameValue) {\n      setTenzies(true)\n    }\n  },[dice])\n  \n  function generateNewDie(){\n    return(\n      {value:Math.ceil(Math.random() * 6),\n        isHeld:false,\n        id: nanoid()}\n    )\n  }\n  function allNewDice() {\n    const newDice = []\n    for (let i = 0; i < 10; i++) {\n      newDice.push(generateNewDie())\n    }\n    return newDice\n  }\n  function rollDice(){\n    if (!tenzies){\n      setRollCount(prevRollCount => prevRollCount + 1)\n      setDice(prevDice => prevDice.map(die => {\n        return(\n          die.isHeld ?  \n          die :\n          generateNewDie()\n        )})\n      )\n    }\n    else{\n      setTenzies(false)\n      setDice(allNewDice())\n      setRollCount(0)\n    }\n  }\n  function holdDice(id){\n    return(\n      setDice(prevDice => prevDice.map(die => {\n        return die.id === id ? \n        {...die, isHeld: !die.isHeld} : \n        die\n      }))\n    )\n  }\n  const diceElements = dice.map(die => \n  <Die key={die.id} holdDice={() => holdDice(die.id)} value={die.value} isHeld={die.isHeld} />)\n  \n  return (\n    <main>\n      {tenzies && <Confetti />}\n      <h1 className=\"title\">Tenzies</h1>\n      <p className=\"instructions\">Roll until all dice are the same. Click each die to freeze it at its current value between rolls.</p>\n      <div className=\"dice-container\">\n        {diceElements}\n      </div>\n      \n      <h3 className=\"rollCount\">Number of Rolls: {rollCount}</h3>\n      <button className=\"roll-dice\"onClick={rollDice}>{tenzies? \"New Game\" : \"Roll\"}</button>\n      \n    </main>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}