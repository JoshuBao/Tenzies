{"ast":null,"code":"var _jsxFileName = \"/Users/joshuacheng/Desktop/CodingProjects/Tenzies/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport style from \"./style.css\";\nimport Die from \"./components/Die\";\n/**\n * Challenge:\n * \n * Create state to hold our array of numbers. (Initialize\n * the state by calling our `allNewDice` function so it \n * loads all new dice as soon as the app loads)\n * \n * Map over the state numbers array to generate our array\n * of Die elements and render those in place of our\n * manually-written 10 Die elements.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  function allNewDice() {\n    const newDice = [];\n\n    for (let i = 0; i < 10; i++) {\n      newDice.push(Math.ceil(Math.random() * 6));\n    }\n\n    return newDice;\n  }\n\n  const [dice, setDice] = React.useState(allNewDice());\n  const diceElements = dice.Map(die => /*#__PURE__*/_jsxDEV(Die, {\n    value: die\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 40\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dice-container\",\n      children: diceElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"xvXbcdGT8woTgToF7dgthv/zhW0=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","style","Die","App","allNewDice","newDice","i","push","Math","ceil","random","dice","setDice","useState","diceElements","Map","die"],"sources":["/Users/joshuacheng/Desktop/CodingProjects/Tenzies/src/App.js"],"sourcesContent":["import React from \"react\"\nimport style from \"./style.css\"\nimport Die from \"./components/Die\"\n\n/**\n * Challenge:\n * \n * Create state to hold our array of numbers. (Initialize\n * the state by calling our `allNewDice` function so it \n * loads all new dice as soon as the app loads)\n * \n * Map over the state numbers array to generate our array\n * of Die elements and render those in place of our\n * manually-written 10 Die elements.\n */\nexport default function App() {\n  \n  function allNewDice() {\n    const newDice = []\n    for (let i = 0; i < 10; i++) {\n      newDice.push(Math.ceil(Math.random() * 6))\n    }\n    return newDice\n  }\n  const [dice,setDice] = React.useState(allNewDice())\n  const diceElements = dice.Map(die => <Die value={die} />)\n  return (\n    <main>\n      <div className=\"dice-container\">\n        {diceElements}\n        \n\n      </div>\n    </main>\n  )\n}"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASC,GAAT,GAAe;EAAA;;EAE5B,SAASC,UAAT,GAAsB;IACpB,MAAMC,OAAO,GAAG,EAAhB;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;MAC3BD,OAAO,CAACE,IAAR,CAAaC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgB,CAA1B,CAAb;IACD;;IACD,OAAOL,OAAP;EACD;;EACD,MAAM,CAACM,IAAD,EAAMC,OAAN,IAAiBZ,KAAK,CAACa,QAAN,CAAeT,UAAU,EAAzB,CAAvB;EACA,MAAMU,YAAY,GAAGH,IAAI,CAACI,GAAL,CAASC,GAAG,iBAAI,QAAC,GAAD;IAAK,KAAK,EAAEA;EAAZ;IAAA;IAAA;IAAA;EAAA,QAAhB,CAArB;EACA,oBACE;IAAA,uBACE;MAAK,SAAS,EAAC,gBAAf;MAAA,UACGF;IADH;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AASD;;GApBuBX,G;;KAAAA,G"},"metadata":{},"sourceType":"module"}