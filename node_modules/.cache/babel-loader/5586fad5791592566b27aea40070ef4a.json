{"ast":null,"code":"var _jsxFileName = \"/Users/joshuacheng/Desktop/CodingProjects/Tenzies/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport style from \"./style.css\";\nimport Die from \"./components/Die\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [dice, setDice] = React.useState(allNewDice());\n\n  function allNewDice() {\n    const newDice = [];\n\n    for (let i = 0; i < 10; i++) {\n      newDice.push({\n        value: Math.ceil(Math.random() * 6),\n        isHeld: false,\n        id: nanoid()\n      });\n    }\n\n    return newDice;\n  }\n  /**\n  * Challenge: Update the `rollDice` function to not just roll\n  * all new dice, but instead to look through the existing dice\n  * to NOT role any that are being `held`.\n  * \n  * Hint: this will look relatively similiar to the `holdDice`\n  * function below. When creating new dice, remember to use\n  * `id: nanoid()` so any new dice have an `id` as well.\n  */\n\n\n  function rollDice() {\n    setDice(prevDice => prevDice.map(die => {\n      return die.isHeld ? {\n        value: Math.ceil(Math.random() * 6),\n        isHeld: false,\n        id: nanoid()\n      } : die;\n    }));\n  }\n\n  function holdDice(id) {\n    return setDice(prevDice => prevDice.map(die => {\n      return die.id === id ? { ...die,\n        isHeld: !die.isHeld\n      } : die;\n    }));\n  }\n\n  const diceElements = dice.map(die => /*#__PURE__*/_jsxDEV(Die, {\n    holdDice: () => holdDice(die.id),\n    value: die.value,\n    isHeld: die.isHeld\n  }, die.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 3\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dice-container\",\n      children: diceElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"roll-dice\",\n      onClick: rollDice,\n      children: \"Roll\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"xvXbcdGT8woTgToF7dgthv/zhW0=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","style","Die","nanoid","App","dice","setDice","useState","allNewDice","newDice","i","push","value","Math","ceil","random","isHeld","id","rollDice","prevDice","map","die","holdDice","diceElements"],"sources":["/Users/joshuacheng/Desktop/CodingProjects/Tenzies/src/App.js"],"sourcesContent":["import React from \"react\"\nimport style from \"./style.css\"\nimport Die from \"./components/Die\"\nimport { nanoid } from \"nanoid\"\n\n\nexport default function App() {\n\n \n  const [dice,setDice] = React.useState(allNewDice())\n  function allNewDice() {\n    const newDice = []\n    for (let i = 0; i < 10; i++) {\n      newDice.push({\n        value:Math.ceil(Math.random() * 6),\n        isHeld:false,\n        id: nanoid()\n      })\n    }\n    \n    \n    return newDice\n  }\n  /**\n * Challenge: Update the `rollDice` function to not just roll\n * all new dice, but instead to look through the existing dice\n * to NOT role any that are being `held`.\n * \n * Hint: this will look relatively similiar to the `holdDice`\n * function below. When creating new dice, remember to use\n * `id: nanoid()` so any new dice have an `id` as well.\n */\n  function rollDice()\n  {\n    setDice(prevDice => prevDice.map(die => {\n        return(\n          die.isHeld ?  \n          {value:Math.ceil(Math.random() * 6),\n          isHeld:false,\n         id: nanoid()} :\n        die\n        )\n    }))\n  }\n  function holdDice(id){\n    return(\n      setDice(prevDice => prevDice.map(die => {\n        return die.id === id ? \n        {...die, isHeld: !die.isHeld} : \n        die\n      }))\n    )\n  }\n  const diceElements = dice.map(die => \n  <Die key={die.id} holdDice={() => holdDice(die.id)} value={die.value} isHeld={die.isHeld} />)\n  \n  return (\n    <main>\n      <div className=\"dice-container\">\n        {diceElements}\n      </div>\n      <button className=\"roll-dice\"onClick={rollDice}>Roll</button>\n    </main>\n  )\n}"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAGA,eAAe,SAASC,GAAT,GAAe;EAAA;;EAG5B,MAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBN,KAAK,CAACO,QAAN,CAAeC,UAAU,EAAzB,CAAvB;;EACA,SAASA,UAAT,GAAsB;IACpB,MAAMC,OAAO,GAAG,EAAhB;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;MAC3BD,OAAO,CAACE,IAAR,CAAa;QACXC,KAAK,EAACC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgB,CAA1B,CADK;QAEXC,MAAM,EAAC,KAFI;QAGXC,EAAE,EAAEd,MAAM;MAHC,CAAb;IAKD;;IAGD,OAAOM,OAAP;EACD;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE,SAASS,QAAT,GACA;IACEZ,OAAO,CAACa,QAAQ,IAAIA,QAAQ,CAACC,GAAT,CAAaC,GAAG,IAAI;MACpC,OACEA,GAAG,CAACL,MAAJ,GACA;QAACJ,KAAK,EAACC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgB,CAA1B,CAAP;QACAC,MAAM,EAAC,KADP;QAEDC,EAAE,EAAEd,MAAM;MAFT,CADA,GAIFkB,GALA;IAOH,CARmB,CAAb,CAAP;EASD;;EACD,SAASC,QAAT,CAAkBL,EAAlB,EAAqB;IACnB,OACEX,OAAO,CAACa,QAAQ,IAAIA,QAAQ,CAACC,GAAT,CAAaC,GAAG,IAAI;MACtC,OAAOA,GAAG,CAACJ,EAAJ,KAAWA,EAAX,GACP,EAAC,GAAGI,GAAJ;QAASL,MAAM,EAAE,CAACK,GAAG,CAACL;MAAtB,CADO,GAEPK,GAFA;IAGD,CAJmB,CAAb,CADT;EAOD;;EACD,MAAME,YAAY,GAAGlB,IAAI,CAACe,GAAL,CAASC,GAAG,iBACjC,QAAC,GAAD;IAAkB,QAAQ,EAAE,MAAMC,QAAQ,CAACD,GAAG,CAACJ,EAAL,CAA1C;IAAoD,KAAK,EAAEI,GAAG,CAACT,KAA/D;IAAsE,MAAM,EAAES,GAAG,CAACL;EAAlF,GAAUK,GAAG,CAACJ,EAAd;IAAA;IAAA;IAAA;EAAA,QADqB,CAArB;EAGA,oBACE;IAAA,wBACE;MAAK,SAAS,EAAC,gBAAf;MAAA,UACGM;IADH;MAAA;MAAA;MAAA;IAAA,QADF,eAIE;MAAQ,SAAS,EAAC,WAAlB;MAA6B,OAAO,EAAEL,QAAtC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAJF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAQD;;GA1DuBd,G;;KAAAA,G"},"metadata":{},"sourceType":"module"}